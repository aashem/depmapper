{"version":3,"sources":["services/jsonServices.js","reducers/jsonReducer.js","reducers/cyReducer.js","reducers/nodeReducer.js","reducers/edgeReducer.js","ui/header.js","graph/cytoscape.js","ui/ListNodes.js","App.js","graph/nodeStyles.js","store.js","index.js"],"names":["url","jsonServices","getAll","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","Axios","get","sent","abrupt","data","stop","apply","this","arguments","create","_ref2","_callee2","content","_context2","post","_x","update","_ref3","_callee3","id","_context3","put","concat","_x2","_x3","getById","_ref4","_callee4","_context4","_x4","remove","_ref5","_callee5","_context5","delete","_x5","jsonReducer","state","length","undefined","action","type","cyReducer","nodeReducer","edgeReducer","Header","react_default","createElement","href","graph","newCy","isGroup","selectedNodes","groupingList","cytoscape","use","cxtmenu","cy","window","container","document","getElementById","autolock","hideEdgesOnViewport","minZoom","maxZoom","style","selector","label","curve-style","width","line-color","target-arrow-color","target-arrow-shape","layout","name","commands","select","ele","resize","lock","prompt","push","alert","on","event","evtTarget","target","console","log","move","parent","compareId","edges","map","e","edgeId","includes","add","group","source","selected","unlock","connect","nodes","props","clickHandler","filter","n","setTimeout","unselect","list","key","onClick","mapDispatchToProps","initializeNodes","initializeEdges","initializeJson","dispatch","json","initCy","postJson","updateJson","initJsonId","removeGraphId","shapes","s","value","colors","c","_useState","useState","_useState2","slicedToArray","setCy","_useState3","_useState4","setId","_useState5","_useState6","start","setStart","_useState7","_useState8","graphNames","setGraphNames","_useState9","_useState10","currName","setCurrName","useEffect","updateGraphNames","j","updateElements","clearElements","loadGraph","newId","className","header","react_select_browser_esm","placeholder","onChange","reset","options","ui_ListNodes","newName","toString","g","destroy","confirm","onSubmit","preventDefault","size","createId","added","position","x","y","background-color","color","shape","reducer","combineReducers","store","createStore","applyMiddleware","thunk","subscribe","getState","ReactDOM","render","es","src_App"],"mappings":"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","file":"static/js/main.949154e4.chunk.js","sourcesContent":["import Axios from 'axios'\n\n\n//PORT\nconst url = \"http://localhost:3001/api/graph\"\n\nconst getAll = async () => {\n    const response = await Axios.get(url)\n    return response.data\n}\n\nconst create = async (content) => {\n    const response = await Axios.post(url, content)\n    return response.data\n}   \n\nconst update = async (id, content) => {\n    const response = await Axios.put(url+`/${id}`, content)\n    return response.data\n}\n\nconst getById = async (id) => {\n    const response = await Axios.get(url+`/${id}`)\n    return response.data\n}\n\nconst remove = async (id) => {\n    const response = await Axios.delete(url+`/${id}`)\n    return response.data\n}\n\nexport default {getAll, create, update, getById, remove}\n","import jsonServices from '../services/jsonServices'\n\n\n\nconst jsonReducer = (state = null, action) =>{\n    switch(action.type){\n    case 'INIT':\n        return action.data\n    case 'POST':\n        return action.data\n    case 'UPDATE':\n        return action.data\n    case 'INITID':\n        return action.data\n    case 'DELETEID':\n        return action.data\n    default:\n        return state\n    }\n\n\n\n}\nexport const initializeJson = () => {\n    return async dispatch => {\n        let json = await jsonServices.getAll()\n        dispatch({\n            type: 'INIT',\n            data: json,\n        })\n    }\n}\n\nexport const postJson = (content) => {\n    return async dispatch => {\n        await jsonServices.create(content)\n        let json = await jsonServices.getAll()\n        dispatch({\n            type:'POST',\n            data: json,\n        })\n    }\n}\n\nexport const updateJson = (id, content) => {\n    return async dispatch => {\n        await jsonServices.update(id, content)\n        let json = await jsonServices.getAll()\n        dispatch({\n            type:'UPDATE',\n            data: json,\n        })\n    }\n}\n\nexport const initJsonId = (id) => {\n    return async dispatch => {\n        let json = await jsonServices.getById(id)\n        dispatch({\n            type:'INITID',\n            data:json,\n        })\n    }\n}\n\nexport const removeGraphId = (id) => {\n    return async dispatch => {\n        await jsonServices.remove(id)\n        let json = await jsonServices.getAll()\n        dispatch({\n            type:'DELETEID',\n            data: json,\n        })\n    }\n}\n \nexport default jsonReducer","const cyReducer = (state = \"\", action) => {\n    switch(action.type){\n        case \"INITCY\":\n            return action.data\n        default:\n            return state\n    }\n}\n\nexport const initCy = (cy) => {\n    return {\n        type: \"INITCY\",\n        data: cy\n    }\n}\n\nexport default cyReducer","const INITNODES = 'INITNODES'\n\nconst nodeReducer = (state = {}, action) => {\n    switch(action.type){\n        case INITNODES:\n            return action.data\n        default:\n            return state\n    }\n}\n\nexport const initializeNodes = (nodes) => {\n    return{\n        type: INITNODES,\n        data: nodes\n    }\n}\n\n\nexport default nodeReducer","const edgeReducer = (state = {}, action) => {\n    switch(action.type){\n        case \"INITEDGES\":\n            return action.data\n        default:\n            return state\n    }\n}\n\nexport const initializeEdges = (edges) => {\n    return{\n        type:\"INITEDGES\",\n        data: edges\n    }\n}\n\nexport default edgeReducer","import React from 'react'\n\nconst Header = () => {\n  \n    return <div>DepMapper\n      <a href=\"https://github.com/aashem/depmapper/\"> Git</a>\n    </div>\n  }\n  \nexport default Header","import cytoscape from 'cytoscape'\nimport cxtmenu from 'cytoscape-cxtmenu'\n\nconst graph = (newCy) => {\n    let isGroup = false\n\n    let selectedNodes = []\n    let groupingList = []\n    if(!newCy){\n      cytoscape.use(cxtmenu)\n    }\n  \n      let cy = window.cy = cytoscape({\n        container: document.getElementById('cy'),\n        autolock: false,\n        hideEdgesOnViewport: false,\n        minZoom: 1e0,\n        maxZoom: 1e1,\n            \n        style: [ // the stylesheet for the graph\n          {\n            selector: 'node',\n            style: {\n              'label': 'data(name)',\n            }\n          },\n      \n          {\n            selector: 'edge',\n            style: {\n              'curve-style': \"bezier\",\n              'width': 5,\n              'line-color': 'black',\n              'target-arrow-color': 'black',\n              'target-arrow-shape': 'triangle',\n              'label': 'data(name)'\n            }\n          }\n        ],\n      \n        layout: {\n          name: \"preset\",\n        }\n        \n      })\n      cy.cxtmenu({\n        selector: \"node\",\n        commands: [\n          {\n            content:\"Remove\",\n            select: (ele) => {\n              cy.remove(ele)\n              cy.resize()\n            }\n          },\n          {\n            content:\"Connect\",\n            select: (ele) => {\n              ele.select()\n              ele.lock()\n              cy.resize()\n            }\n          },\n          {\n            content:\"Rename\",\n            select: (ele) => {\n              let name = window.prompt()\n              if (name){\n              ele.data(\"name\", name)\n              cy.resize()\n              }       \n            }\n          },{\n            content:\"Group\",\n            select: (ele) => {\n              isGroup = true\n              ele.lock()\n              groupingList.push(ele)\n              window.alert('choose parent node')\n              cy.resize()\n            }\n          }\n        ],\n      })\n  \n      cy.cxtmenu({\n        selector: \"edge\",\n        commands: [\n          {\n          content:\"Remove\",\n          select: (ele) => {\n            cy.remove(ele)\n            cy.resize()\n            }\n          },\n          {\n          content:\"Rename\",\n          select: (ele) => {\n            let name = window.prompt()\n            if(name){\n                ele.data(\"name\", name)\n                cy.resize()\n              }\n \n            }\n          }\n        ]\n      })\n\n      //todo refactor all eventhandlers to fix bugs and usability issues \n  \n      cy.on('tap', (event) => {\n        let evtTarget = event.target;\n        console.log(selectedNodes)\n        if(evtTarget !== cy){\n            console.log(evtTarget.data())\n          if(groupingList.length >= 1){\n            groupingList[0].move({parent: evtTarget.id()})\n            groupingList = []\n          }\n          if(selectedNodes.length === 1){\n\n            selectedNodes.push(evtTarget)  \n\n            if(selectedNodes.length > 1){\n\n              let compareId = cy.edges().map(e => e.id())\n              let edgeId = `${selectedNodes[0].id()}${selectedNodes[1].id()}`\n\n                if(compareId.includes(\"e\" + edgeId)){\n\n                  window.alert(\"Connection already exists\")\n              }else{\n\n                  cy.add({group:\"edges\", data:{ id: \"e\"+ selectedNodes[0].id()+selectedNodes[1].id(), source:selectedNodes[0].id(), target:selectedNodes[1].id(), name:\"\" }})\n              }\n              selectedNodes = []\n          }\n        }\n        } \n      })\n  \n      cy.on('lock', (event) => {\n        let selected = event.target;\n\n        if(isGroup){\n          isGroup = false\n          selected.unlock()\n\n        }else{\n\n          window.alert(\"choose target\")\n          selectedNodes.push(selected)\n          selected.unlock()\n        }\n  \n      } )\n  \n\n\n    \n  \n      \n  \n    return cy\n  }\n\n  export default graph ","import React from 'react'\nimport {connect} from 'react-redux'\n\nconst ListNodes = (props) => {\n    //let [show, setShow]  = useState('false')\n    let cy = props.cy\n\n\n    //todo show edges connected to the node when the table element is clicked\n    const clickHandler = (event) => {\n        cy.nodes(cy.nodes().filter(n => n.id() === event.target.id)).select()\n        let selected = cy.nodes(cy.nodes().filter(n => n.id() === event.target.id))\n        console.log(selected)\n        setTimeout(()=> {\n            cy.nodes().unselect()\n        },500)\n       // setShow(true)\n    } \n\n      \n    \n    if (props.nodes[0]){\n        let list = props.nodes.map(n => \n             <tr key = {n.id()}> \n            <td onClick={clickHandler}  id = {n.id()}>{n.data('name') +' '+ n.id()}</td>\n            </tr> \n\n            )\n        return (<table>\n            <tbody>\n                <tr>\n                    <th>NAME</th>\n                </tr>\n                 {list}\n            </tbody>\n            </table>\n            )\n    }\n    return <div>Select Graph</div>\n    \n}\n\nconst mapStateToProps = state => {\n    return{\n        cy: state.cy,\n        nodes: state.nodes,\n    }\n}\n\nconst mapDispatchToProps = {\n\n}\n\n\nexport default connect(\nmapStateToProps,\nmapDispatchToProps\n)(ListNodes);","import React,{useEffect, useState} from 'react';\nimport Select from 'react-select'\nimport {connect} from 'react-redux'\nimport {postJson, initializeJson, updateJson, initJsonId, removeGraphId} from './reducers/jsonReducer'\nimport {initCy} from './reducers/cyReducer'\nimport {initializeNodes} from './reducers/nodeReducer'\nimport {initializeEdges} from './reducers/edgeReducer'\nimport Header from './ui/header'\nimport graph from './graph/cytoscape'\nimport './styles/App.css'\nimport ListNodes from './ui/ListNodes'\nimport {shapeList, colorList} from './graph/nodeStyles'\n//import dispatchTest from './graph/graphHandlers'\n\n//todo split app into smaller components\n\n\n\n\nconst App = (props) => {\n  const shapes = shapeList()\n  const colors = colorList()\n  const [cy, setCy] = useState('')\n  const [id, setId] = useState('0')\n  const [start,setStart] = useState(true)\n  const [graphNames, setGraphNames] = useState([])\n  const [currName, setCurrName] = useState('new')\n\n\n  useEffect(() => {\n    //initialize cytoscape graph and set it to attribute cy\n    setCy(graph())\n  },[])\n\n  setTimeout(()=> {\n    updateGraphNames()\n  },1000)\n\n  const updateGraphNames = () => {\n    if(props.graph){\n      setGraphNames(props.graph.map(j => j = {value: j.id, label : j.name}))  \n    }\n  }\n\n    const startFunction = () => {\n      if(props.graph){\n          //cy.json() is cytoscape method which returns the graph configuration in json\n            //cy.json(props.graph) method configures graph with the json'\n        //Maps graph names to a list from the db to be read by the select component\n        updateGraphNames()\n        setStart(false)\n      }\n    }\n  if(start){\n    //GET cytoscape json config from db and insert it into redux state.json\n    props.initCy(cy)\n    props.initializeJson()\n    startFunction()\n\n  }\n\n  const updateElements = () => {\n    props.initializeEdges(cy.edges())\n    props.initializeNodes(cy.nodes())\n  \n  }\n\nconst clearElements = () => {\n    props.initializeEdges('')\n    props.initializeNodes('')\n    \n  }\n  \n\n  const selectGraph = value => {\n    cy.reset()\n    let newId = value.value\n    setId(newId)\n    let name = props.graph.filter(j => j.id === newId)\n    setCurrName(name[0].name)\n    loadGraph(newId)\n    updateElements()\n  }\n  \n  \n  const saveGraph = () => {\n  \n    let graph = {\n      json: cy.json(),\n      name: currName,\n    }\n    console.log(graph.name  )\n      if(props.graph.map(g => g.name).includes(graph.name)){\n        if(window.confirm(`Already graph named ${graph.name} overwrite?`)){\n          props.updateJson(id, graph)\n        }\n      }else{\n        props.postJson(graph)\n      }\n   \n   \n  }\n\n  const loadGraph = (newId) => {\n    let graph\n    if(id !== '0'|| typeof newId === typeof id){\n      if (typeof newId === typeof id){\n        let id = newId\n        graph = props.graph.filter(j => j.id === id)\n        console.log(graph[0].json)\n        cy.json(graph[0].json)\n        }else{\n          graph = props.graph.filter(j => j.id === id)\n          cy.json(graph[0].json)\n          }\n    }\n    updateElements()\n    //dispatchTest()\n  }\n\n  const addNode = (event) => {\n    event.preventDefault()\n      const createId = () => {\n        let id = cy.nodes().size()\n        id = id + 1\n        return id\n      }\n      let id = createId()\n\n    let added = cy.add({\n      data: { id: `${id}`+ currName , name: \"\" },\n      position: {\n        x:200,\n        y:200,\n      },\n    })\n    //refactor\n    //create new stylesheet for each node so properties are saved into the json\n    cy.style().selector('node#' + added.id())\n      .style({'background-color' : `${event.target.color.value}` || 'black', 'shape' : `${event.target.shape.value}` || 'ellipse'})\n        .update()\n\n    updateElements()\n  }\n\n  const newGraph = () => {\n    let newName = window.prompt(\"New Graph Name:\").toString()\n    if(props.graph.map(g => g.name).includes(newName)){\n      window.alert(`graph ${newName} exists already`)\n    }else{\n      setCurrName(newName)\n      cy.destroy()\n      setCy(graph(true))\n      clearElements()\n    }\n \n  }\n\n  const deleteGraph = () => {\n    if(id !== '0'){\n    if(window.confirm(`Delete ${currName} from app & database`)){\n      cy.destroy()\n      setCy(graph(true))\n      props.removeGraphId(id)\n      setCurrName('new')\n      }else{\n        console.log(\"no deletion\")\n      }\n      clearElements()\n    }else{\n      window.alert('graph has not been saved')\n    }\n\n  }\n\n  const renameGraph = () => {\n    let name = window.prompt('Name: ')\n    let graph = {\n      json: cy.json(),\n      name: name,\n    } \n      if(id !== '0'){\n        props.removeGraphId(id)\n      }\n      setCurrName(name)\n      props.postJson(graph)\n      cy.resize()\n   \n  }\n  return (\n  <div className = \"Header\" >\n    <Header currName = {currName}></Header>\n    <div className = 'Wrapper'>\n    <div className = \"LeftPanel\">  \n      <div className = 'LeftPanelLeft'>\n      <h3 className = \"GraphName\">Graph: {currName} </h3>\n              <Select \n                placeholder = \"Graph\"\n                className = \"Select\"\n                name = \"graph\"\n                onChange = {selectGraph}\n                options = {graphNames}\n              ></Select> \n\n            <ListNodes/>  \n         \n            </div>\n            </div>\n            \n    <div className= \"App\">\n      <div className = \"UpperButtons\">\n        <button onClick = {newGraph} className = \"UpperButton\">New Graph</button>\n        <button onClick = {deleteGraph} className = \"UpperButton\">Delete Graph</button>\n        <button onClick = {renameGraph} className = \"UpperButton\">Rename Graph</button>\n      </div>\n      \n      \n    <div className=\"Cy\"id = 'cy'></div>\n            <div className = 'AddNodePanel'>\n          <form onSubmit = {addNode}>\n            <button type= 'submit'>Add Node</button>\n              <Select\n              placeholder = 'ellipse'\n              className = 'AddNodePanel'\n              name = \"shape\"\n              options = {shapes}\n              >\n              </Select>\n              <Select\n              placeholder = 'black'\n              className = 'AddNodePanel'\n              name= \"color\"\n              options = {colors}\n              ></Select>\n          </form>\n        </div>\n     \n    \n      <div className= \"Panel\">\n        <button onClick ={saveGraph}>save</button>\n        <button onClick = {loadGraph}>load</button>\n      \n      \n      </div>      \n    </div>\n  </div>\n  </div>\n\n  )\n\n    \n\n}\nconst mapStateToProps = state => {\n  return{\n    graph: state.json,\n  }\n  \n}\n\nconst mapDispatchToProps = {\n  initializeNodes,\n  initializeEdges,\n  initializeJson,\n  initCy,\n  postJson,\n  updateJson,\n  initJsonId,\n  removeGraphId,\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n","\nexport const shapeList = () => {\nconst shapeList = [\n    'ellipse',\n    'triangle',\n    'rectangle',\n    'round-rectangle',\n    'bottom-round-rectangle',\n    'cut-rectangle',\n    'barrel',\n    'rhomboid',\n    'diamond',\n    'pentagon',\n    'hexagon',\n    'concave-hexagon',\n    'heptagon',\n    'octagon',\n    'star',\n    'tag',\n    'vee'\n]\n \n    return shapeList.map(s => s = {value: s, label: s})\n}\n\nexport const colorList = () =>{\nconst colorList = [\n    'blue',\n    'red',\n    'green',\n    'teal',\n    'yellow',\n    'white',\n    'black',\n    'gray',\n    'brown',\n]\n    return colorList.map(c => c = {value: c, label: c})\n}\n","import {createStore, combineReducers, applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport jsonReducer from './reducers/jsonReducer'\nimport nodeReducer from './reducers/nodeReducer'\nimport edgeReducer from './reducers/edgeReducer';\nimport cyReducer from './reducers/cyReducer';\n\nconst reducer = combineReducers({\n    json: jsonReducer,\n    nodes: nodeReducer,\n    edges: edgeReducer,\n    cy: cyReducer,\n})\n\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nstore.subscribe(()=> {\n    console.log(store.getState())\n})\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport store from './store'\n\n\nReactDOM.render(\n<Provider store={store}>\n<App/>\n</Provider>  ,\n document.getElementById('root')\n);\n\n"],"sourceRoot":""}